version: '3.8'

services:
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
    - "3001:3001"
    depends_on:
      - kafka
      - postgres
    environment:
      - PORT=3001
      - INTERNAL_SERVICE_TOKEN=super-secret-token
      # - KAFKA_BROKER=kafka:29092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=yardly
    networks:
      - internal

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    depends_on:
      - user-service
      - redis
    ports:
    - "3002:3002"
    environment:
      - PORT=3002
      - USER_SERVICE_URL=http://user-service:3001/internal
      - INTERNAL_SERVICE_TOKEN=super-secret-token
      - REDIS_URL=redis://redis:6379
      - JWT_ACCESS_SECRET=supersecretaccesstoken
      - JWT_REFRESH_SECRET=supersecretrefreshtoken
      - JWT_RESET_SECRET=supersecretresettoken
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=yardly
    networks:
      - internal

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
    networks:
      - internal

  # Postgres
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres       # ← adjust as needed
      POSTGRES_PASSWORD: postgres   # ← use secrets in real deployments
      POSTGRES_DB: yardly              # ← name of the database
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal

  # Zookeeper service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    networks:
      - internal
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    networks:
      - internal
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI (optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - internal
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    profiles:
      - ui

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - internal
      
volumes:
  postgres-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:

networks:
  internal:
    driver: bridge